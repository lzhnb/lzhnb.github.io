{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/Util.js","../src/SplatBuffer.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/worker/sorter.wasm","../src/Viewer.js","../src/RenderableViewer.js"],"sourcesContent":["export const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch(path)\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (true) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk);\r\n                        }\r\n                        const buffer = new Blob(chunks).arrayBuffer();\r\n                        resolve(buffer);\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        onProgress(percent, percentLabel, chunk);\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n","import * as THREE from 'three';\r\nimport { clamp } from './Util.js';\r\n\r\nconst tempVector3A = new THREE.Vector3();\r\nconst tempVector3B = new THREE.Vector3();\r\nconst tempVector4A = new THREE.Vector4();\r\nconst tempVector4B = new THREE.Vector4();\r\nconst tempQuaternion4A = new THREE.Quaternion();\r\nconst tempQuaternion4B = new THREE.Quaternion();\r\n\r\nlet fbf;\r\nlet tbf;\r\n\r\nexport class SplatBuffer {\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 16,\r\n            ScaleRange: 1\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 8,\r\n            ScaleRange: 32767\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n    static CovarianceSizeBytes = 24;\r\n\r\n    static HeaderSizeBytes = 1024;\r\n\r\n    constructor(bufferData) {\r\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\r\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\r\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\r\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n        this.versionMajor = this.headerArrayUint8[0];\r\n        this.versionMinor = this.headerArrayUint8[1];\r\n        this.headerExtraK = this.headerArrayUint8[2];\r\n        this.compressionLevel = this.headerArrayUint8[3];\r\n        this.splatCount = this.headerArrayUint32[1];\r\n        this.bucketSize = this.headerArrayUint32[2];\r\n        this.bucketCount = this.headerArrayUint32[3];\r\n        this.bucketBlockSize = this.headerArrayFloat32[4];\r\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\r\n        this.bytesPerBucket = this.headerArrayUint32[5];\r\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\r\n\r\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\r\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\r\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\r\n\r\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n\r\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\r\n\r\n        fbf = this.fbf.bind(this);\r\n        tbf = this.tbf.bind(this);\r\n\r\n        this.linkBufferArrays();\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\r\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\r\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\r\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\r\n        this.rotationArray = new FloatArray(this.splatBufferData,\r\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\r\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\r\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\r\n    }\r\n\r\n    fbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.fromHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    tbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.toHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    getHeaderBufferData() {\r\n        return this.headerBufferData;\r\n    }\r\n\r\n    getSplatBufferData() {\r\n        return this.splatBufferData;\r\n    }\r\n\r\n    getCenter(index, outCenter = new THREE.Vector3(), transform) {\r\n        let bucket = [0, 0, 0];\r\n        const centerBase = index * SplatBuffer.CenterComponentCount;\r\n        if (this.compressionLevel > 0) {\r\n            const sf = this.compressionScaleFactor;\r\n            const sr = this.compressionScaleRange;\r\n            const bucketIndex = Math.floor(index / this.bucketSize);\r\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\r\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\r\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\r\n        } else {\r\n            outCenter.x = this.centerArray[centerBase];\r\n            outCenter.y = this.centerArray[centerBase + 1];\r\n            outCenter.z = this.centerArray[centerBase + 2];\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n        return outCenter;\r\n    }\r\n\r\n    setCenter(index, center) {\r\n        let bucket = [0, 0, 0];\r\n        const centerBase = index * SplatBuffer.CenterComponentCount;\r\n        if (this.compressionLevel > 0) {\r\n            const sf = 1.0 / this.compressionScaleFactor;\r\n            const sr = this.compressionScaleRange;\r\n            const maxR = sr * 2 + 1;\r\n            const bucketIndex = Math.floor(index / this.bucketSize);\r\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n            this.centerArray[centerBase] = clamp(Math.round((center.x - bucket[0]) * sf) + sr, 0, maxR);\r\n            this.centerArray[centerBase + 1] = clamp(Math.round((center.y - bucket[1]) * sf) + sr, 0, maxR);\r\n            this.centerArray[centerBase + 2] = clamp(Math.round((center.z - bucket[2]) * sf) + sr, 0, maxR);\r\n        } else {\r\n            this.centerArray[centerBase] = center.x;\r\n            this.centerArray[centerBase + 1] = center.y;\r\n            this.centerArray[centerBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    getScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        return function(index, outScale = new THREE.Vector3(), outRotation = new THREE.Quaternion(), transform) {\r\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\r\n            outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\r\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\r\n            outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\r\n                            fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\r\n            if (transform) {\r\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getColor(index, outColor = new THREE.Vector4(), transform) {\r\n        const colorBase = index * SplatBuffer.ColorComponentCount;\r\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\r\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\r\n        // TODO: apply transform for spherical harmonics\r\n        return outColor;\r\n    }\r\n\r\n    setColor(index, color) {\r\n        const colorBase = index * SplatBuffer.ColorComponentCount;\r\n        this.colorArray[colorBase] = color.x;\r\n        this.colorArray[colorBase + 1] = color.y;\r\n        this.colorArray[colorBase + 2] = color.z;\r\n        this.colorArray[colorBase + 3] = color.w;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    fillCovarianceArray(covarianceArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\r\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\r\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\r\n                         fbf(this.rotationArray[rotationBase + 2]),\r\n                         fbf(this.rotationArray[rotationBase + 3]),\r\n                         fbf(this.rotationArray[rotationBase]));\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            covarianceArray[covBase] = transformedCovariance.elements[0];\r\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\r\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\r\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\r\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\r\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\r\n        }\r\n    }\r\n\r\n    fillCenterArray(outCenterArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        let bucket = [0, 0, 0];\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\r\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\r\n            if (this.compressionLevel > 0) {\r\n                const bucketIndex = Math.floor(i / this.bucketSize);\r\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n                const sf = this.compressionScaleFactor;\r\n                const sr = this.compressionScaleRange;\r\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\r\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\r\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\r\n            } else {\r\n                center.x = this.centerArray[centerSrcBase];\r\n                center.y = this.centerArray[centerSrcBase + 1];\r\n                center.z = this.centerArray[centerSrcBase + 2];\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    fillColorArray(outColorArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\r\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\r\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\r\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\r\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\r\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\r\n            // TODO: implement application of transform for spherical harmonics\r\n        }\r\n    }\r\n\r\n    swapVertices(indexA, indexB) {\r\n\r\n        const getScale = (index, outScale = new THREE.Vector3()) => {\r\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\r\n            outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\r\n            return outScale;\r\n        };\r\n\r\n        const setScale = (index, scale) => {\r\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\r\n            this.scaleArray[scaleBase] = tbf(scale.x);\r\n            this.scaleArray[scaleBase + 1] = tbf(scale.y);\r\n            this.scaleArray[scaleBase + 2] = tbf(scale.z);\r\n        };\r\n\r\n        const getRotation = (index, outRotation = new THREE.Quaternion()) => {\r\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\r\n            outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\r\n                            fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\r\n            return outRotation;\r\n        };\r\n\r\n        const setRotation = (index, rotation) => {\r\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\r\n            this.rotationArray[rotationBase] = tbf(rotation.w);\r\n            this.rotationArray[rotationBase + 1] = tbf(rotation.x);\r\n            this.rotationArray[rotationBase + 2] = tbf(rotation.y);\r\n            this.rotationArray[rotationBase + 3] = tbf(rotation.z);\r\n        };\r\n\r\n        getCenter(indexA, tempVector3A);\r\n        getCenter(indexB, tempVector3B);\r\n        setCenter(indexB, tempVector3A);\r\n        setCenter(indexA, tempVector3B);\r\n\r\n        getScale(indexA, tempVector3A);\r\n        getScale(indexB, tempVector3B);\r\n        setScale(indexB, tempVector3A);\r\n        setScale(indexA, tempVector3B);\r\n\r\n        getRotation(indexA, tempQuaternion4A);\r\n        getRotation(indexB, tempQuaternion4B);\r\n        setRotation(indexB, tempQuaternion4A);\r\n        setRotation(indexA, tempQuaternion4B);\r\n\r\n        getColor(indexA, tempVector4A);\r\n        getColor(indexB, tempVector4B);\r\n        setColor(indexB, tempVector4A);\r\n        setColor(indexA, tempVector4B);\r\n\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { clamp } from './Util.js';\r\n\r\nconst SplatBufferBucketSize = 256;\r\nconst SplatBufferBucketBlockSize = 5.0;\r\n\r\nexport class SplatCompressor {\r\n\r\n    constructor(compressionLevel = 0, minimumAlpha = 1, bucketSize = SplatBufferBucketSize, blockSize = SplatBufferBucketBlockSize) {\r\n        this.compressionLevel = compressionLevel;\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.bucketSize = bucketSize;\r\n        this.blockSize = blockSize;\r\n    }\r\n\r\n    static createEmptyUncompressedSplatArray() {\r\n        return {\r\n            'splatCount': 0,\r\n            'scale_0': [],\r\n            'scale_1': [],\r\n            'scale_2': [],\r\n            'rot_0': [],\r\n            'rot_1': [],\r\n            'rot_2': [],\r\n            'rot_3': [],\r\n            'x': [],\r\n            'y': [],\r\n            'z': [],\r\n            'f_dc_0': [],\r\n            'f_dc_1': [],\r\n            'f_dc_2': [],\r\n            'opacity': [],\r\n            'addSplat': function(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\r\n                this.x.push(x);\r\n                this.y.push(y);\r\n                this.z.push(z);\r\n                this.scale_0.push(scale0);\r\n                this.scale_1.push(scale1);\r\n                this.scale_2.push(scale2);\r\n                this.rot_0.push(rot0);\r\n                this.rot_1.push(rot1);\r\n                this.rot_2.push(rot2);\r\n                this.rot_3.push(rot3);\r\n                this.f_dc_0.push(r);\r\n                this.f_dc_1.push(g);\r\n                this.f_dc_2.push(b);\r\n                this.opacity.push(opacity);\r\n                this.splatCount++;\r\n            }\r\n        };\r\n    }\r\n\r\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\r\n\r\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\r\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n        for (let i = 0; i < splatArray.splatCount; i++) {\r\n            let alpha;\r\n            if (splatArray['opacity'][i]) {\r\n                alpha = splatArray['opacity'][i];\r\n            } else {\r\n                alpha = 255;\r\n            }\r\n            if (alpha >= this.minimumAlpha) {\r\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\r\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\r\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\r\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\r\n            }\r\n        }\r\n\r\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\r\n\r\n        const paddedSplatCount = buckets.length * this.bucketSize;\r\n        const headerSize = SplatBuffer.HeaderSizeBytes;\r\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\r\n        header[3] = this.compressionLevel;\r\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\r\n\r\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\r\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\r\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\r\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\r\n\r\n        const blockHalfSize = this.blockSize / 2.0;\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\r\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n\r\n        const bucketCenter = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n        let outSplatIndex = 0;\r\n        for (let b = 0; b < buckets.length; b++) {\r\n            const bucket = buckets[b];\r\n            bucketCenter.fromArray(bucket.center);\r\n            for (let i = 0; i < bucket.splats.length; i++) {\r\n                let row = bucket.splats[i];\r\n                let invalidSplat = false;\r\n                if (row === 0) {\r\n                    invalidSplat = true;\r\n                }\r\n\r\n                if (this.compressionLevel === 0) {\r\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scales = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\r\n                        scales.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\r\n                    } else {\r\n                        scales.set([0.01, 0.01, 0.01]);\r\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\r\n                    }\r\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\r\n                } else {\r\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scales = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\r\n                        scales.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\r\n                    } else {\r\n                        scales.set([thf(0.01), thf(0.01), thf(0.01)]);\r\n                        rot.set([thf(1.), 0, 0, 0]);\r\n                    }\r\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\r\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\r\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n                }\r\n\r\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\r\n                if (invalidSplat) {\r\n                    rgba[0] = 255;\r\n                    rgba[1] = 0;\r\n                    rgba[2] = 0;\r\n                    rgba[3] = 0;\r\n                } else {\r\n                    if (validSplats['f_dc_0'][row] !== undefined) {\r\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\r\n                    } else {\r\n                        rgba.set([255, 0, 0]);\r\n                    }\r\n                    if (validSplats['opacity'][row] !== undefined) {\r\n                        rgba[3] = validSplats['opacity'][row];\r\n                    } else {\r\n                        rgba[3] = 255;\r\n                    }\r\n                }\r\n\r\n                outSplatIndex++;\r\n            }\r\n        }\r\n\r\n        const bytesPerBucket = 12;\r\n        const bucketsSize = bytesPerBucket * buckets.length;\r\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\r\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\r\n\r\n        const headerArrayUint32 = new Uint32Array(header.buffer);\r\n        const headerArrayFloat32 = new Float32Array(header.buffer);\r\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\r\n        if (this.compressionLevel > 0) {\r\n            unifiedBufferSize += bucketsSize;\r\n            headerArrayUint32[2] = this.bucketSize;\r\n            headerArrayUint32[3] = buckets.length;\r\n            headerArrayFloat32[4] = this.blockSize;\r\n            headerArrayUint32[5] = bytesPerBucket;\r\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        }\r\n\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\r\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\r\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\r\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\r\n\r\n        if (this.compressionLevel > 0) {\r\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\r\n            for (let i = 0; i < buckets.length; i++) {\r\n                const bucket = buckets[i];\r\n                const base = i * 3;\r\n                bucketArray[base] = bucket.center[0];\r\n                bucketArray[base + 1] = bucket.center[1];\r\n                bucketArray[base + 2] = bucket.center[2];\r\n            }\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    computeBucketsForUncompressedSplatArray(splatArray) {\r\n        let splatCount = splatArray.splatCount;\r\n        const blockSize = this.blockSize;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= this.bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        // fill partially full buckets with invalid splats (splat 0)\r\n        // to get them up to this.bucketSize\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    while (bucket.splats.length < this.bucketSize) {\r\n                        bucket.splats.push(0);\r\n                    }\r\n                    fullBuckets.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullBuckets;\r\n    }\r\n}\r\n","import { SplatCompressor } from './SplatCompressor.js';\r\n\r\nexport class PlyParser {\r\n\r\n    constructor(plyBuffer) {\r\n        this.plyBuffer = plyBuffer;\r\n    }\r\n\r\n    decodeHeader(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n\r\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\r\n\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\r\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n            if (endHeaderTestText.includes('end_header')) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        let splatCount = 0;\r\n        let propertyTypes = {};\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element vertex')) {\r\n                const splatCountMatch = line.match(/\\d+/);\r\n                if (splatCountMatch) {\r\n                    splatCount = parseInt(splatCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === 'end_header') {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\r\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\r\n\r\n        return {\r\n            'splatCount': splatCount,\r\n            'propertyTypes': propertyTypes,\r\n            'vertexData': vertexData,\r\n            'headerOffset': headerOffset\r\n        };\r\n    }\r\n\r\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseToSplatBuffer(compressionLevel = 0, minimumAlpha = 1) {\r\n\r\n        const startTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT...');\r\n\r\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\r\n\r\n        // figure out the SH degree from the number of coefficients\r\n        let nRestCoeffs = 0;\r\n        for (const propertyName in propertyTypes) {\r\n            if (propertyName.startsWith('f_rest_')) {\r\n                nRestCoeffs += 1;\r\n            }\r\n        }\r\n        const nCoeffsPerColor = nRestCoeffs / 3;\r\n\r\n        // TODO: Eventually properly support multiple degree spherical harmonics\r\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n        const sphericalHarmonicsDegree = 0;\r\n\r\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n        // figure out the order in which spherical harmonics should be read\r\n        const shFeatureOrder = [];\r\n        for (let rgb = 0; rgb < 3; ++rgb) {\r\n            shFeatureOrder.push(`f_dc_${rgb}`);\r\n        }\r\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n            }\r\n        }\r\n\r\n        let plyRowSize = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = plyRowSize;\r\n                plyRowSize += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        let rawVertex = {};\r\n\r\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let row = 0; row < splatCount; row++) {\r\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\r\n            if (rawVertex['scale_0'] !== undefined) {\r\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\r\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\r\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\r\n            } else {\r\n                splatArray['scale_0'][row] = 0.01;\r\n                splatArray['scale_1'][row] = 0.01;\r\n                splatArray['scale_2'][row] = 0.01;\r\n            }\r\n\r\n            if (rawVertex['f_dc_0'] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\r\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\r\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\r\n            } else {\r\n                splatArray['f_dc_0'][row] = 0;\r\n                splatArray['f_dc_1'][row] = 0;\r\n                splatArray['f_dc_2'][row] = 0;\r\n            }\r\n            if (rawVertex['opacity'] !== undefined) {\r\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\r\n            }\r\n\r\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\r\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\r\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\r\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\r\n\r\n            splatArray['x'][row] = rawVertex['x'];\r\n            splatArray['y'][row] = rawVertex['y'];\r\n            splatArray['z'][row] = rawVertex['z'];\r\n            splatArray.splatCount++;\r\n        }\r\n\r\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha);\r\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n\r\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\r\n\r\n        const endTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT complete!');\r\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\r\n\r\n        return splatBuffer;\r\n    }\r\n\r\n}\r\n","import { PlyParser } from './PlyParser.js';\r\nimport { fetchWithProgress } from './Util.js';\r\n\r\nexport class PlyLoader {\r\n\r\n    constructor() {\r\n        this.splatBuffer = null;\r\n    }\r\n\r\n    fetchFile(fileName, onProgress) {\r\n        return new Promise((resolve, reject) => {\r\n            fetchWithProgress(fileName, onProgress)\r\n            .then((data) => {\r\n                resolve(data);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress, compressionLevel = 0, minimumAlpha = 1) {\r\n        return new Promise((resolve, reject) => {\r\n            const loadPromise = this.fetchFile(fileName, onProgress);\r\n            loadPromise\r\n            .then((plyFileData) => {\r\n                const plyParser = new PlyParser(plyFileData);\r\n                const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha);\r\n                this.splatBuffer = splatBuffer;\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { SplatCompressor } from './SplatCompressor.js';\r\nimport { fetchWithProgress } from './Util.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    constructor(splatBuffer = null) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.downLoadLink = null;\r\n    }\r\n\r\n    static isFileSplatFormat(fileName) {\r\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\r\n    }\r\n\r\n    static isCustomSplatFormat(fileName) {\r\n        return fileName.endsWith('.ksplat');\r\n    }\r\n\r\n    static isStandardSplatFormat(fileName) {\r\n        return fileName.endsWith('.splat');\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress) {\r\n        return new Promise((resolve, reject) => {\r\n            fetchWithProgress(fileName, onProgress)\r\n            .then((bufferData) => {\r\n                let splatBuffer;\r\n                if (SplatLoader.isCustomSplatFormat(fileName)) {\r\n                    splatBuffer = new SplatBuffer(bufferData);\r\n                } else {\r\n                    const splatCompressor = new SplatCompressor(0, 1);\r\n                    const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\r\n                    splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n                }\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const InBufferRowSizeBytes = 32;\r\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inCenterSizeBytes = 3 * 4;\r\n            const inScaleSizeBytes = 3 * 4;\r\n            const inColorSizeBytes = 4;\r\n            const inBase = i * InBufferRowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n    setFromBuffer(splatBuffer) {\r\n        this.splatBuffer = splatBuffer;\r\n    }\r\n\r\n    downloadFile(fileName) {\r\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\r\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\r\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\r\n            type: 'application/octet-stream',\r\n        });\r\n\r\n        if (!this.downLoadLink) {\r\n            this.downLoadLink = document.createElement('a');\r\n            document.body.appendChild(this.downLoadLink);\r\n        }\r\n        this.downLoadLink.download = fileName;\r\n        this.downLoadLink.href = URL.createObjectURL(blob);\r\n        this.downLoadLink.click();\r\n    }\r\n\r\n}\r\n","import {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","export class LoadingSpinner {\r\n\r\n    constructor(message, container) {\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerDivContainerOuter = document.createElement('div');\r\n        this.spinnerDivContainerOuter.className = 'outerContainer';\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerDivContainer = document.createElement('div');\r\n        this.spinnerDivContainer.className = 'container';\r\n\r\n        this.spinnerDiv = document.createElement('div');\r\n        this.spinnerDiv.className = 'loader';\r\n\r\n        this.messageDiv = document.createElement('div');\r\n        this.messageDiv.className = 'message';\r\n        this.messageDiv.innerHTML = this.message;\r\n\r\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\r\n        this.spinnerDivContainer.appendChild(this.messageDiv);\r\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .message {\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                padding-top:15px;\r\n                width: 180px;\r\n            }\r\n\r\n            .outerContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n            }\r\n\r\n            .container {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n            }\r\n\r\n            .loader {\r\n                width: 120px;        /* the size */\r\n                padding: 15px;       /* the border thickness */\r\n                background: #07e8d6; /* the color */\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n                margin-left: 30px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerDivContainerOuter.appendChild(style);\r\n    }\r\n\r\n    show() {\r\n        this.spinnerDivContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerDivContainerOuter);\r\n        }\r\n        this.container = container;\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageDiv.innerHTML = msg;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyMaterial = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.scene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            this.meshCursor.children.forEach((child) => {\r\n                child.geometry.dispose();\r\n                child.material.dispose();\r\n            });\r\n            this.scene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n            this.focusMarker = sphereMesh;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            this.focusMarker.position.copy(tempPosition);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n        planeGeometry.rotateX(-Math.PI / 2);\r\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n        planeMaterial.transparent = true;\r\n        planeMaterial.opacity = 0.6;\r\n        planeMaterial.depthTest = false;\r\n        planeMaterial.depthWrite = false;\r\n        planeMaterial.side = THREE.DoubleSide;\r\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n        const arrowDir = new THREE.Vector3(0, 1, 0);\r\n        arrowDir.normalize();\r\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n        const arrowLength = 0.5;\r\n        const arrowRadius = 0.01;\r\n        const arrowColor = 0x00dd00;\r\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n        this.controlPlane = new THREE.Object3D();\r\n        this.controlPlane.add(planeMesh);\r\n        this.controlPlane.add(arrowHelper);\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.scene.add(this.debugRoot);\r\n        this.scene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n    }\r\n\r\n    set(origin, normal, distance) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction) {\r\n        this.ray = new Ray(origin, direction);\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            fromLocal.copy(splatMesh.matrixWorld);\r\n            toLocal.copy(fromLocal).invert();\r\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\r\n\r\n            const splatTree = splatMesh.getSplatTree();\r\n            if (splatTree.rootNode) {\r\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\r\n            }\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n            outHits.forEach((hit) => {\r\n                hit.origin.applyMatrix4(fromLocal);\r\n                hit.normal.transformDirection(fromLocal);\r\n            });\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        // Used for raycasting against splat ellipsoid\r\n        /*\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const tempRotationMatrix = new THREE.Matrix4();\r\n        const tempScaleMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n        */\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    const splatLocalIndex = splatTree.getSplatLocalIndex(splatGlobalIndex);\r\n                    const splatBuffer = splatTree.getSplatBufferForSplat(splatGlobalIndex);\r\n                    const splatTransform = splatTree.getTransformForSplat(splatGlobalIndex);\r\n                    splatBuffer.getCenter(splatLocalIndex, tempCenter, splatTransform);\r\n                    splatBuffer.getScaleAndRotation(splatLocalIndex, tempScale, tempRotation, splatTransform);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Simple approximated sphere intersection\r\n                    const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                    if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                        outHits.push(tempHit.clone());\r\n                    }\r\n\r\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\r\n                    // as the approximated sphere approach\r\n                    /*\r\n                    splatBuffer.getRotation(splatLocalIndex, tempRotation, splatTransform);\r\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                    fromSphereSpace.copy(tempScaleMatrix).premultiply(tempRotationMatrix);\r\n                    toSphereSpace.copy(fromSphereSpace).invert();\r\n                    tempRay.origin.copy(this.ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                    tempRay.direction.copy(this.ray.direction).transformDirection(toSphereSpace).normalize();\r\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                        const hitClone = tempHit.clone();\r\n                        hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                        outHits.push(hitClone);\r\n                    }\r\n                    */\r\n\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nlet idGen = 0;\r\n\r\nexport class SplatTreeNode {\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || idGen++;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatTreeNode } from './SplatTreeNode.js';\r\n\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.splatMesh = [];\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n        this.globalSplatIndexToLocalSplatIndexMap = {};\r\n        this.globalSplatIndexToSplatBufferIndexMap = {};\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.splatMesh.splatBuffers[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\r\n    }\r\n\r\n    getTransformForSplat(globalIndex) {\r\n        return this.splatMesh.splatTransforms[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    processSplatMesh(splatMesh, filterFunc = () => true) {\r\n        const center = new THREE.Vector3();\r\n        this.splatMesh = splatMesh;\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n        this.globalSplatIndexToLocalSplatIndexMap = {};\r\n        this.globalSplatIndexToSplatBufferIndexMap = {};\r\n\r\n        let totalSplatCount = 0;\r\n        let validSplatCount = 0;\r\n        for (let s = 0; s < this.splatMesh.splatBuffers.length; s++) {\r\n            const splatBuffer = this.splatMesh.splatBuffers[s];\r\n            const splatCount = splatBuffer.getSplatCount();\r\n            const transform = this.splatMesh.splatTransforms[s];\r\n            for (let i = 0; i < splatCount; i++) {\r\n                if (filterFunc(s, splatBuffer, i, transform)) {\r\n                    splatBuffer.getCenter(i, center, transform);\r\n                    if (validSplatCount === 0 || center.x < this.sceneMin.x) this.sceneMin.x = center.x;\r\n                    if (validSplatCount === 0 || center.x > this.sceneMax.x) this.sceneMax.x = center.x;\r\n                    if (validSplatCount === 0 || center.y < this.sceneMin.y) this.sceneMin.y = center.y;\r\n                    if (validSplatCount === 0 || center.y > this.sceneMax.y) this.sceneMax.y = center.y;\r\n                    if (validSplatCount === 0 || center.z < this.sceneMin.z) this.sceneMin.z = center.z;\r\n                    if (validSplatCount === 0 || center.z > this.sceneMax.z) this.sceneMax.z = center.z;\r\n                    validSplatCount++;\r\n                }\r\n                this.globalSplatIndexToLocalSplatIndexMap[totalSplatCount] = i;\r\n                this.globalSplatIndexToSplatBufferIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n\r\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\r\n\r\n        const indexes = [];\r\n        for (let i = 0; i < totalSplatCount; i ++) {\r\n            const splatLocalIndex = this.getSplatLocalIndex(i);\r\n            const splatBufferIndex = this.globalSplatIndexToSplatBufferIndexMap[i];\r\n            const splatBuffer = this.getSplatBufferForSplat(i);\r\n            const transform = this.getTransformForSplat(i);\r\n            if (filterFunc(splatBufferIndex, splatBuffer, splatLocalIndex, transform)) {\r\n                indexes.push(i);\r\n            }\r\n        }\r\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\r\n        this.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n        this.processNode(this.rootNode, splatMesh);\r\n    }\r\n\r\n    processNode(node, splatMesh) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < this.maxCentersPerNode || node.depth > this.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!this.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    this.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            this.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\r\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\r\n\r\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\r\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\r\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const splatLocalIndex = this.getSplatLocalIndex(splatGlobalIndex);\r\n            const splatBuffer = this.getSplatBufferForSplat(splatGlobalIndex);\r\n            const transform = this.getTransformForSplat(splatGlobalIndex);\r\n            splatBuffer.getCenter(splatLocalIndex, center, transform);\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            this.processNode(child, splatMesh);\r\n        }\r\n    }\r\n\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        return visitLeavesFromNode(this.rootNode, visitFunc);\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatTree } from './splattree/SplatTree.js';\r\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\r\n\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true) {\r\n        super({'morphAttributes': {}, 'fake': true}, null);\r\n        this.renderer = undefined;\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n        this.devicePixelRatio = devicePixelRatio;\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n        this.splatBuffers = [];\r\n        this.splatTree = null;\r\n        this.splatDataTextures = null;\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'viewProjLoc': -1,\r\n        };\r\n    }\r\n\r\n    static buildMaterial() {\r\n\r\n        const vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;\r\n            uniform vec2 focal;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n            varying vec2 vSigma;\r\n\r\n            const float sqrt2 = sqrt(2.0);\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n\r\n                vPosition = position.xy;\r\n\r\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\r\n\r\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                mat3 J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n                mat3 W = transpose(mat3(modelViewMatrix));\r\n                mat3 T = W * J;\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                // cov2Dm[0][0] += 0.3;\r\n                // cov2Dm[1][1] += 0.3;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\r\n                // matrix (called 'conic') to determine fragment opacity.\r\n                float a = cov2Dv.x;\r\n                float b = cov2Dv.y;\r\n                float c = cov2Dv.z;\r\n                float D = a * c - b * b;\r\n                float trace = a + c;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(trace * trace / 4.0 - D);\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = traceOver2 - term2; // prevent negative eigen value\r\n                float sigma1 = sqrt(eigenValue1);\r\n                float sigma2 = sqrt(max(eigenValue2, 0.00));\r\n                vSigma = vec2(sigma1, sigma2);\r\n\r\n                const float maxSplatSize = 1024.0;\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                // vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n                vec2 eigenVector2 = normalize(vec2(eigenValue2 - c, b));\r\n                vec2 basisVector1 = eigenVector1 * min(3.0 * sigma1, maxSplatSize);\r\n                vec2 basisVector2 = eigenVector2 * min(3.0 * sigma2, maxSplatSize);\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport * 2.0;\r\n\r\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n            varying vec2 vSigma;\r\n            \r\n            const float M_2PIf = 6.28318530717958647692;\r\n\r\n            void main () {\r\n                // compute the negative squared distance from the center of the splat to the\r\n                // current fragment in the splat's local space.\r\n                float A = dot(vPosition, vPosition);\r\n                if (A > 1.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                float sigma1 = vSigma.x;\r\n                float sigma2 = vSigma.y;\r\n                float U2 = 3.0 * vPosition.x + 0.5 / sigma1;\r\n                float U1 = 3.0 * vPosition.x - 0.5 / sigma1;\r\n                float cdfU1 = 1.0 / (1.0 + exp(-1.6 * U1 - 0.07 * U1 * U1 * U1));\r\n                float cdfU2 = 1.0 / (1.0 + exp(-1.6 * U2 - 0.07 * U2 * U2 * U2));\r\n                float intU = sigma1 * (cdfU2 - cdfU1);\r\n                float V2 = 3.0 * vPosition.y + 0.5 / sigma2;\r\n                float V1 = 3.0 * vPosition.y - 0.5 / sigma2;\r\n                float cdfV1 = 1.0 / (1.0 + exp(-1.6 * V1 - 0.07 * V1 * V1 * V1));\r\n                float cdfV2 = 1.0 / (1.0 + exp(-1.6 * V2 - 0.07 * V2 * V2 * V2));\r\n                float intV = sigma2 * (cdfV2 - cdfV1);\r\n                float integral = M_2PIf * intU * intV;\r\n\r\n                A = integral * vColor.a;\r\n                // A = min(0.99, A);\r\n                // if (A < 1.0 / 255.0) A = 0.0;\r\n                // A = exp(A) * vColor.a;\r\n                gl_FragColor = vec4(color.rgb, A);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildGeomtery(splatBuffers) {\r\n\r\n        let totalSplatCount = SplatMesh.getTotalSplatCount(splatBuffers);\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        const splatIndexArray = new Uint32Array(totalSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = totalSplatCount;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.disposeGPUResources();\r\n        }\r\n    }\r\n\r\n    disposeMeshData() {\r\n        if (this.geometry && !this.geometry.fake) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n        this.splatTree = null;\r\n    }\r\n\r\n    build(splatBuffers, splatBufferOptions) {\r\n        this.disposeMeshData();\r\n        this.splatBuffers = splatBuffers;\r\n        this.splatBufferOptions = splatBufferOptions;\r\n        this.buildSplatTransforms();\r\n        this.geometry = SplatMesh.buildGeomtery(this.splatBuffers);\r\n        this.material = SplatMesh.buildMaterial();\r\n        this.buildSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.setupDistancesTransformFeedback();\r\n        }\r\n        this.resetLocalSplatDataAndTexturesFromSplatBuffer();\r\n    }\r\n\r\n    buildSplatTransforms() {\r\n        this.splatTransforms = [];\r\n        for (let splatBufferOptions of this.splatBufferOptions) {\r\n            if (splatBufferOptions) {\r\n                let positionArray = splatBufferOptions['position'] || [0, 0, 0];\r\n                let rotationArray = splatBufferOptions['rotation'] || [0, 0, 0, 1];\r\n                let scaleArray = splatBufferOptions['scale'] || [1, 1, 1];\r\n                const position = new THREE.Vector3().fromArray(positionArray);\r\n                const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n                const scale = new THREE.Vector3().fromArray(scaleArray);\r\n                const transform = new THREE.Matrix4();\r\n                transform.compose(position, rotation, scale);\r\n                this.splatTransforms.push(transform);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildSplatTree() {\r\n\r\n        this.splatTree = new SplatTree(8, 1000);\r\n        console.time('SplatTree build');\r\n        const splatColor = new THREE.Vector4();\r\n        this.splatTree.processSplatMesh(this, (splatBufferIndex, splatBuffer, splatLocalIndex, transform) => {\r\n            splatBuffer.getColor(splatLocalIndex, splatColor, transform);\r\n            const splatBufferOptions = this.splatBufferOptions[splatBufferIndex];\r\n            return splatColor.w > (splatBufferOptions.splatAlphaRemovalThreshold || 1);\r\n        });\r\n        console.timeEnd('SplatTree build');\r\n\r\n        let leavesWithVertices = 0;\r\n        let avgSplatCount = 0;\r\n        let maxSplatCount = 0;\r\n        let nodeCount = 0;\r\n\r\n        this.splatTree.visitLeaves((node) => {\r\n            const nodeSplatCount = node.data.indexes.length;\r\n            if (nodeSplatCount > 0) {\r\n                avgSplatCount += nodeSplatCount;\r\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                nodeCount++;\r\n                leavesWithVertices++;\r\n            }\r\n        });\r\n        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\r\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n        avgSplatCount = avgSplatCount / nodeCount;\r\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    resetLocalSplatDataAndTexturesFromSplatBuffer() {\r\n        this.updateLocalSplatDataFromSplatBuffer();\r\n        this.allocateAndStoreLocalSplatDataInTextures();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.updateCentersGPUBufferForDistancesComputation();\r\n        }\r\n    }\r\n\r\n    updateLocalSplatDataFromSplatBuffer() {\r\n        const splatCount = this.getSplatCount();\r\n        this.covariances = new Float32Array(splatCount * 6);\r\n        this.centers = new Float32Array(splatCount * 3);\r\n        this.colors = new Uint8Array(splatCount * 4);\r\n\r\n        let offset = 0;\r\n        for (let i = 0; i < this.splatBuffers.length; i++) {\r\n            const splatBuffer = this.splatBuffers[i];\r\n            const transform = this.splatTransforms[i];\r\n            splatBuffer.fillCovarianceArray(this.covariances, offset, transform);\r\n            splatBuffer.fillCenterArray(this.centers, offset, transform);\r\n            splatBuffer.fillColorArray(this.colors, offset, transform);\r\n            offset += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    allocateAndStoreLocalSplatDataInTextures() {\r\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\r\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\n        const splatCount = this.getSplatCount();\r\n\r\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\r\n            covariancesTextureSize.y *= 2;\r\n        }\r\n\r\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\r\n            centersColorsTextureSize.y *= 2;\r\n        }\r\n\r\n        let covariancesTexture;\r\n        let paddedCovariances;\r\n        if (this.halfPrecisionCovariancesOnGPU) {\r\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            for (let i = 0; i < this.covariances.length; i++) {\r\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(this.covariances[i]);\r\n            }\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\r\n        } else {\r\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            paddedCovariances.set(this.covariances);\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\r\n        }\r\n        covariancesTexture.needsUpdate = true;\r\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\r\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\r\n\r\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\r\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < splatCount; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(this.colors[colorsBase], this.colors[colorsBase + 1],\r\n                                                                 this.colors[colorsBase + 2], this.colors[colorsBase + 3]);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(this.centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(this.centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(this.centers[centersBase + 2]);\r\n        }\r\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\r\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColorsTexture.internalFormat = 'RGBA32UI';\r\n        centersColorsTexture.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'covariances': {\r\n                'data': paddedCovariances,\r\n                'texture': covariancesTexture,\r\n                'size': covariancesTextureSize\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCenterColors,\r\n                'texture': centersColorsTexture,\r\n                'size': centersColorsTextureSize\r\n            }\r\n        };\r\n    }\r\n\r\n    updateSplatDataToDataTextures() {\r\n        this.updateLocalCovarianceDataToDataTexture();\r\n        this.updateLocalCenterColorDataToDataTexture();\r\n    }\r\n\r\n    updateLocalCovarianceDataToDataTexture() {\r\n        this.splatDataTextures.covariances.data.set(this.covariances);\r\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\r\n    }\r\n\r\n    updateLocalCenterColorDataToDataTexture() {\r\n        this.splatDataTextures.centerColors.data.set(this.centerColors);\r\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\r\n    }\r\n\r\n    updateIndexes(indexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n\r\n        geometry.attributes.splatIndex.set(indexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCount(this.splatBuffers);\r\n    }\r\n\r\n    static getTotalSplatCount(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesTransformFeedback();\r\n                this.updateCentersGPUBufferForDistancesComputation();\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesTransformFeedback = function() {\r\n\r\n        let currentRenderer;\r\n        let currentSplatCount;\r\n\r\n        return function() {\r\n            const splatCount = this.getSplatCount();\r\n\r\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\r\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\r\n            const rebuildBuffers = currentSplatCount !== splatCount;\r\n            if (rebuildGPUObjects) {\r\n                this.disposeGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            const vsSource =\r\n            `#version 300 es\r\n                in ivec3 center;\r\n                uniform ivec3 viewProj;\r\n                flat out int distance;\r\n                void main(void) {\r\n                    distance = center.x * viewProj.x + center.y * viewProj.y + center.z * viewProj.z;\r\n                }\r\n            `;\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc = gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            this.distancesTransformFeedback.viewProjLoc = gl.getUniformLocation(this.distancesTransformFeedback.program, 'viewProj');\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.DYNAMIC_COPY);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            currentRenderer = this.renderer;\r\n            currentSplatCount = splatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    getIntegerCenters(padFour) {\r\n        const splatCount = this.getSplatCount();\r\n        const floatCenters = new Float32Array(this.centers);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n\r\n    updateCentersGPUBufferForDistancesComputation() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const intCenters = this.getIntegerCenters(false);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    computeDistancesOnGPU(viewProjMatrix, outComputedDistances) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const iViewProjMatrix = this.getIntegerMatrixArray(viewProjMatrix);\r\n        const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n\r\n        // console.time(\"gpu_compute_distances\");\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n        gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n        gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n        gl.uniform3i(this.distancesTransformFeedback.viewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n        gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\r\n\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n        gl.beginTransformFeedback(gl.POINTS);\r\n        gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n        gl.endTransformFeedback();\r\n\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n        gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n        if (currentProgram) gl.useProgram(currentProgram);\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n\r\n}\r\n","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let viewProjOffset;\r\n    let countsZero;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, viewProj, usePrecomputedDistances) {\r\n        const sortStartTime = performance.now();\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Int32Array(wasmMemory, viewProjOffset, 16).set(viewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, viewProjOffset,\r\n                                         sortedIndexesOffset, Constants.DepthMapRange, splatSortCount,\r\n                                         splatRenderCount, splatCount, usePrecomputedDistances);\r\n        const sortEndTime = performance.now();\r\n\r\n        self.postMessage({\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': sortEndTime - sortStartTime\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\r\n            self.postMessage({\r\n                'sortSetupComplete': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            sort(sortCount, renderCount, e.data.sort.viewProj, e.data.sort.usePrecomputedDistances);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = Constants.BytesPerInt * 4;\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForViewProjMatrix = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForPrecomputedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForViewProjMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 4,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                viewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = viewProjOffset + memoryRequiredForViewProjMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                self.postMessage({\r\n                    'sortSetupPhase1Complete': true,\r\n                    'indexesToSortBuffer': wasmMemory,\r\n                    'indexesToSortOffset': indexesToSortOffset,\r\n                    'sortedIndexesBuffer': wasmMemory,\r\n                    'sortedIndexesOffset': sortedIndexesOffset,\r\n                    'precomputedDistancesBuffer': wasmMemory,\r\n                    'precomputedDistancesOffset': precomputedDistancesOffset\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0002\u0002{\u0002} \t \bk!\n\u0002@ \u000b\u0004@A����\u0007!\u000bA����x!\b \t \nM\r\u0001 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \u000b \u0001 \u000bH\u001b!\u000b \u0001 \b \u0001 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000bA����\u0007!\u000bA����x!\b \t \nM\r\u0000 \u0005A(j \u0005A\u0018j \u0005�\t\u0002\b�V\u0002\u0000\u0001�V\u0002\u0000\u0002!\r \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \r��\u0001\"\f�\u001b\u0000 \f�\u001b\u0001j \f�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000b \u0002 \u000bH\u001b!\u000b \u0002 \b \u0002 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\u000b \t \nK\u0004@ \u0007A\u0001k� \b� \u000b���!\u000e \n!\b\u0003@\u0002 \u000e \u0003 \bA\u0002tj\"\u0001(\u0002\u0000 \u000bk��\"\u000f�C\u0000\u0000\u0000O]\u0004@ \u000f�\f\u0001\u000bA����x\u000b!\u0005 \u0001 \u00056\u0002\u0000 \u0004 \u0005A\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \bA\u0001j\"\b \tG\r\u0000\u000b\u000b \u0007A\u0002O\u0004@ \u0004(\u0002\u0000!\bA\u0001!\u000b\u0003@ \u0004 \u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000 \bj\"\b6\u0002\u0000 \u000bA\u0001j\"\u000b \u0007G\r\u0000\u000b\u000b \nA\u0000J\u0004@ \n!\u000b\u0003@ \u0006 \u000bA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000bA\u0001J!\u0002 \u0001!\u000b \u0002\r\u0000\u000b\u000b \t \nJ\u0004@ \t!\u000b\u0003@ \u0006 \t \u0004 \u0003 \u000bA\u0001k\"\u000bA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \u000bH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './PlyLoader.js';\r\nimport { SplatLoader } from './SplatLoader.js';\r\nimport { LoadingSpinner } from './LoadingSpinner.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime } from './Util.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\n\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n\r\n        if (options.selfDrivenMode === undefined) options.selfDrivenMode = true;\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.rootElement = options.rootElement;\r\n\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        if (options.halfPrecisionCovariancesOnGPU === undefined) options.halfPrecisionCovariancesOnGPU = true;\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\r\n\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        this.scene = options.scene;\r\n        this.renderer = options.renderer;\r\n        this.camera = options.camera;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n        this.controls = null;\r\n\r\n        this.selfDrivenMode = options.selfDrivenMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\r\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\r\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\r\n            else this.gpuAcceleratedSort = true;\r\n        }\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n\r\n        this.splatMesh = null;\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderingInitialized = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n        this.infoPanelCells = {};\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n\r\n        this.usingExternalCamera = undefined;\r\n        this.usingExternalRenderer = undefined;\r\n        this.initializeFromExternalUpdate = options.initializeFromExternalUpdate || false;\r\n        this.initialized = false;\r\n        if (!this.initializeFromExternalUpdate) this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.initializeFromExternalUpdate) {\r\n            this.usingExternalCamera = this.camera ? true : false;\r\n            this.usingExternalRenderer = this.renderer ? true : false;\r\n        } else {\r\n            this.usingExternalCamera = true;\r\n            this.usingExternalRenderer = true;\r\n        }\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        if (!this.usingExternalCamera) {\r\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n        }\r\n\r\n        this.scene = this.scene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.scene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        if (this.useBuiltInControls) {\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n            this.controls.listenToKeyEvents(window);\r\n            this.controls.rotateSpeed = 0.5;\r\n            this.controls.maxPolarAngle = Math.PI * .75;\r\n            this.controls.minPolarAngle = 0.1;\r\n            this.controls.enableDamping = true;\r\n            this.controls.dampingFactor = 0.05;\r\n            this.controls.target.copy(this.initialCameraLookAt);\r\n            this.rootElement.addEventListener('pointermove', this.onMouseMove.bind(this), false);\r\n            this.rootElement.addEventListener('pointerdown', this.onMouseDown.bind(this), false);\r\n            this.rootElement.addEventListener('pointerup', this.onMouseUp.bind(this), false);\r\n            window.addEventListener('keydown', this.onKeyDown.bind(this), false);\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            const resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n            });\r\n            resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n        this.setupInfoPanel();\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyP':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.style.display = 'block';\r\n                    } else {\r\n                        this.infoPanel.style.display = 'none';\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const clickOffset = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (!this.transitioningCameraTarget && wasClick) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const intersectionPoint = outHits[0].origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setupInfoPanel() {\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.style.position = 'absolute';\r\n        this.infoPanel.style.padding = '10px';\r\n        this.infoPanel.style.backgroundColor = '#cccccc';\r\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\r\n        this.infoPanel.style.zIndex = 100;\r\n        this.infoPanel.style.width = '375px';\r\n        this.infoPanel.style.fontFamily = 'arial';\r\n        this.infoPanel.style.fontSize = '10pt';\r\n        this.infoPanel.style.textAlign = 'left';\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime']\r\n        ];\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.style.width = '110px';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n\r\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanel.style.display = 'none';\r\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\r\n    }\r\n\r\n    updateSplatMeshUniforms = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\r\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\r\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\r\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\r\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    loadFile(fileURL, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        return new Promise((resolve, reject) => {\r\n            if (options.showLoadingSpinner) this.loadingSpinner.show();\r\n            const downloadProgress = (percent, percentLabel) => {\r\n                if (options.showLoadingSpinner) {\r\n                    if (percent == 100) {\r\n                        this.loadingSpinner.setMessage(`Download complete!`);\r\n                    } else {\r\n                        const suffix = percentLabel ? `: ${percentLabel}` : `...`;\r\n                        this.loadingSpinner.setMessage(`Downloading${suffix}`);\r\n                    }\r\n                }\r\n                if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\r\n            };\r\n            this.loadFileToSplatBuffer(fileURL, options.splatAlphaRemovalThreshold, downloadProgress)\r\n            .then((splatBuffer) => {\r\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\r\n                const splatBufferOptions = {\r\n                    'rotation': options.rotation || options.orientation,\r\n                    'position': options.position,\r\n                    'scale': options.scale,\r\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n                };\r\n                this.loadSplatBuffersIntoMesh([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\r\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileURL}`));\r\n            });\r\n        });\r\n    }\r\n\r\n    loadFiles(files, showLoadingSpinner = true, onProgress = undefined) {\r\n        return new Promise((resolve, reject) => {\r\n            const fileCount = files.length;\r\n            const percentComplete = [];\r\n            if (showLoadingSpinner) this.loadingSpinner.show();\r\n            const downloadProgress = (fileIndex, percent, percentLabel) => {\r\n                percentComplete[fileIndex] = percent;\r\n                let totalPercent = 0;\r\n                for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n                totalPercent = totalPercent / fileCount;\r\n                percentLabel = `${totalPercent.toFixed(2)}%`;\r\n                if (showLoadingSpinner) {\r\n                    if (totalPercent == 100) {\r\n                        this.loadingSpinner.setMessage(`Download complete!`);\r\n                    } else {\r\n                        this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\r\n                    }\r\n                }\r\n                if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\r\n            };\r\n\r\n            const downLoadPromises = [];\r\n            for (let i = 0; i < files.length; i++) {\r\n                const meshOptionsForFile = files[i] || {};\r\n                const downloadPromise = this.loadFileToSplatBuffer(files[i].path, meshOptionsForFile.splatAlphaRemovalThreshold,\r\n                                                                   downloadProgress.bind(this, i));\r\n                downLoadPromises.push(downloadPromise);\r\n            }\r\n\r\n            Promise.all(downLoadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (onProgress) options.onProgress(0, '0%', 'processing');\r\n                this.loadSplatBuffersIntoMesh(splatBuffers, files, showLoadingSpinner).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                reject(new Error(`Viewer::loadFiles -> Could not load one or more files.`));\r\n            });\r\n        });\r\n    }\r\n\r\n    loadFileToSplatBuffer(fileURL, plySplatAlphaRemovalThreshold = 1, onProgress = undefined) {\r\n        const downloadProgress = (percent, percentLabel) => {\r\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            let fileLoadPromise;\r\n            if (SplatLoader.isFileSplatFormat(fileURL)) {\r\n                fileLoadPromise = new SplatLoader().loadFromURL(fileURL, downloadProgress);\r\n            } else if (fileURL.endsWith('.ply')) {\r\n                fileLoadPromise = new PlyLoader().loadFromURL(fileURL, downloadProgress, 0, plySplatAlphaRemovalThreshold);\r\n            } else {\r\n                reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${fileURL}`));\r\n            }\r\n            fileLoadPromise\r\n            .then((splatBuffer) => {\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch(() => {\r\n                reject(new Error(`Viewer::loadFileToSplatBuffer -> Could not load file ${fileURL}`));\r\n            });\r\n        });\r\n    }\r\n\r\n    loadSplatBuffersIntoMesh = function() {\r\n\r\n        let loadPromise;\r\n        let loadCount = 0;\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\r\n            this.splatRenderingInitialized = false;\r\n            loadCount++;\r\n            const performLoad = () => {\r\n                return new Promise((resolve) => {\r\n                    if (showLoadingSpinner) {\r\n                        this.loadingSpinner.show();\r\n                        this.loadingSpinner.setMessage(`Processing splats...`);\r\n                    }\r\n                    window.setTimeout(() => {\r\n                        if (this.sortWorker) this.sortWorker.terminate();\r\n                        this.sortWorker = null;\r\n                        this.sortRunning = false;\r\n                        this.updateSplatMesh(splatBuffers, splatBufferOptions);\r\n                        this.setupSortWorker(this.splatMesh).then(() => {\r\n                            loadCount--;\r\n                            if (loadCount === 0) {\r\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                                this.splatRenderingInitialized = true;\r\n                                this.updateView(true, true);\r\n                            }\r\n                            resolve();\r\n                        });\r\n                    }, 1);\r\n                });\r\n            };\r\n            if (!loadPromise) {\r\n                loadPromise = performLoad();\r\n            } else {\r\n                loadPromise = loadPromise.then(() => {\r\n                    return performLoad();\r\n                });\r\n            }\r\n            return loadPromise;\r\n        };\r\n\r\n    }();\r\n\r\n    updateSplatMesh(splatBuffers, splatBufferOptions) {\r\n        if (!this.splatMesh) {\r\n            this.splatMesh = new SplatMesh(this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort);\r\n        }\r\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\r\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\r\n        allSplatBuffers.push(...splatBuffers);\r\n        allSplatBufferOptions.push(...splatBufferOptions);\r\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions);\r\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n        const splatCount = this.splatMesh.getSplatCount();\r\n        console.log(`Total splat count: ${splatCount}`);\r\n        this.splatMesh.frustumCulled = false;\r\n        this.splatRenderCount = splatCount;\r\n    }\r\n\r\n    setupSortWorker(splatMesh) {\r\n        return new Promise((resolve) => {\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const sortWorker = createSortWorker(splatCount);\r\n            sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    this.lastSortTime = e.data.sortTime;\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    console.log('Sorting web worker WASM setup complete.');\r\n                    sortWorker.postMessage({\r\n                        'centers': this.splatMesh.getIntegerCenters(true).buffer\r\n                    });\r\n                    this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                   e.data.sortedIndexesOffset, splatCount);\r\n                    this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                   e.data.indexesToSortOffset, splatCount);\r\n                    this.sortWorkerPrecomputedDistances = new Int32Array(e.data.precomputedDistancesBuffer,\r\n                                                                         e.data.precomputedDistancesOffset, splatCount);\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                } else if (e.data.sortSetupComplete) {\r\n                    console.log('Sorting web worker ready.');\r\n                    this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes, splatCount);\r\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    this.sortWorker = sortWorker;\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    gatherSceneNodes = function() {\r\n\r\n        const nodeRenderList = [];\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        const MaximumDistanceToRender = 125;\r\n\r\n        return function(gatherAllNodes) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\r\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n            let nodeRenderCount = 0;\r\n            let splatRenderCount = 0;\r\n            const nodeCount = splatTree.nodesWithIndexes.length;\r\n            for (let i = 0; i < nodeCount; i++) {\r\n                const node = splatTree.nodesWithIndexes[i];\r\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\r\n                const distanceToNode = tempVector.length();\r\n                tempVector.normalize();\r\n\r\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                const ns = nodeSize(node);\r\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\r\n                    continue;\r\n                }\r\n                splatRenderCount += node.data.indexes.length;\r\n                nodeRenderList[nodeRenderCount] = node;\r\n                node.data.distanceToNode = distanceToNode;\r\n                nodeRenderCount++;\r\n            }\r\n\r\n            nodeRenderList.length = nodeRenderCount;\r\n            nodeRenderList.sort((a, b) => {\r\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                else return 1;\r\n            });\r\n\r\n            this.splatRenderCount = splatRenderCount;\r\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n            for (let i = 0; i < nodeRenderCount; i++) {\r\n                const node = nodeRenderList[i];\r\n                const windowSizeInts = node.data.indexes.length;\r\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                destView.set(node.data.indexes);\r\n                currentByteOffset -= windowSizeBytes;\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            cancelAnimationFrame();\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        this.render();\r\n    }\r\n\r\n    setRenderer(renderer) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n    }\r\n\r\n    setCamera(camera) {\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n    }\r\n\r\n    update(renderer, camera) {\r\n        if (renderer) this.setRenderer(renderer);\r\n        if (camera) this.setCamera(camera);\r\n        if (this.initializeFromExternalUpdate) {\r\n            this.init();\r\n        }\r\n        if (!this.initialized || !this.splatRenderingInitialized) return;\r\n        if (this.controls) this.controls.update();\r\n        this.updateView();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMeshUniforms();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfo();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n            const hasRenderables = (scene) => {\r\n                for (let child of scene.children) {\r\n                    if (child.visible) {\r\n                    return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            this.renderer.autoClear = false;\r\n            if (hasRenderables(this.scene)) this.renderer.render(this.scene, this.camera);\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            const calcDelta = currentTime - lastCalcTime;\r\n            if (calcDelta >= 1.0) {\r\n                this.currentFPS = frameCount;\r\n                frameCount = 0;\r\n                lastCalcTime = currentTime;\r\n            } else {\r\n                frameCount++;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n\r\n        return function() {\r\n            this.renderer.getSize(currentRendererSize);\r\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                if (!this.usingExternalCamera) {\r\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    this.camera.updateProjectionMatrix();\r\n                }\r\n                lastRendererSize.copy(currentRendererSize);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            const fadeInSpeed = 10.0;\r\n            const fadeOutSpeed = 2.5;\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfo = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            const cameraPos = this.camera.position;\r\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\r\n\r\n            const cameraLookAt = this.controls.target;\r\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n\r\n            const cameraUp = this.camera.up;\r\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\r\n\r\n            if (this.showMeshCursor) {\r\n                const cursorPos = this.sceneHelper.meshCursor.position;\r\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\r\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\r\n            } else {\r\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\r\n            }\r\n\r\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\r\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n            const renderPct = this.splatRenderCount / splatCount * 100;\r\n            this.infoPanelCells.renderSplatCount.innerHTML =\r\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\r\n\r\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateView = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedTiers = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return function(force = false, gatherAllNodes = false) {\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force && queuedTiers.length === 0) {\r\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\r\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n            }\r\n\r\n            tempMatrix.copy(this.camera.matrixWorld).invert();\r\n            tempMatrix.premultiply(this.camera.projectionMatrix);\r\n            tempMatrix.multiply(this.splatMesh.matrixWorld);\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            if (!this.sortRunning) {\r\n                let sortCount;\r\n                this.sortRunning = true;\r\n                this.gatherSceneNodes(gatherAllNodes);\r\n                if (this.gpuAcceleratedSort && (queuedTiers.length <= 1 || queuedTiers.length % 2 === 0)) {\r\n                    this.splatMesh.computeDistancesOnGPU(tempMatrix, this.sortWorkerPrecomputedDistances);\r\n                }\r\n                if (queuedTiers.length === 0) {\r\n                    for (let partialSort of partialSorts) {\r\n                        if (angleDiff < partialSort.angleThreshold) {\r\n                            for (let sortFraction of partialSort.sortFractions) {\r\n                                queuedTiers.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    queuedTiers.push(this.splatRenderCount);\r\n                }\r\n                sortCount = Math.min(queuedTiers.shift(), this.splatRenderCount);\r\n                this.sortWorker.postMessage({\r\n                    sort: {\r\n                        'viewProj': this.splatMesh.getIntegerMatrixArray(tempMatrix),\r\n                        'cameraPosition': cameraPositionArray,\r\n                        'splatRenderCount': this.splatRenderCount,\r\n                        'splatSortCount': sortCount,\r\n                        'usePrecomputedDistances': this.gpuAcceleratedSort\r\n                    }\r\n                });\r\n                if (queuedTiers.length === 0) {\r\n                    lastSortViewPos.copy(this.camera.position);\r\n                    lastSortViewDir.copy(sortViewDir);\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\nexport class RenderableViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.initializeFromExternalUpdate = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n\r\n        this.callbackMesh = this.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = this.onBeforeRender.bind(this);\r\n\r\n    }\r\n\r\n    addSceneFromFile(fileURL, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        return this.viewer.loadFile(fileURL, options).then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n    }\r\n\r\n    addScenesFromFiles(files, showLoadingSpinner) {\r\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\r\n        return this.viewer.loadFiles(files, showLoadingSpinner).then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n    }\r\n\r\n    onBeforeRender(renderer, scene, camera) {\r\n        this.viewer.update(renderer, camera);\r\n    }\r\n\r\n    createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","Promise","resolve","reject","fetch","then","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","error","clamp","val","min","max","Math","getCurrentTime","performance","now","tempVector3A","THREE","Vector3","tempVector3B","tempVector4A","Vector4","tempVector4B","tempQuaternion4A","Quaternion","tempQuaternion4B","fbf","tbf","SplatBuffer","static","BytesPerCenter","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerCenter","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","FloatArray","Uint16Array","centerArray","CenterComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","DataUtils","fromHalfFloat","toHalfFloat","getHeaderBufferData","getSplatBufferData","getCenter","index","outCenter","transform","bucket","centerBase","sf","sr","bucketIndex","floor","x","y","z","applyMatrix4","setCenter","center","maxR","round","getScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","outScale","outRotation","scaleBase","rotationBase","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getColor","outColor","colorBase","setColor","color","w","getSplatCount","fillCovarianceArray","covarianceArray","destOffset","scale","rotation","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","tempMatrix4","i","setFromMatrix4","transpose","premultiply","covBase","CovarianceSizeFloats","elements","fillCenterArray","outCenterArray","centerSrcBase","centerDestBase","fillColorArray","outColorArray","colorSrcBase","colorDestBase","swapVertices","indexA","indexB","getScale","setScale","getRotation","setRotation","SplatCompressor","minimumAlpha","blockSize","createEmptyUncompressedSplatArray","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","f_dc_0","f_dc_1","f_dc_2","opacity","addSplat","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","uncompressedSplatArrayToSplatBuffer","splatArray","validSplats","alpha","buckets","computeBucketsForUncompressedSplatArray","paddedSplatCount","headerSize","header","centerBuffer","scaleBuffer","colorBuffer","rotationBuffer","blockHalfSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","fromArray","splats","row","invalidSplat","scales","rot","quat","normalize","thf","sub","rgba","Uint8ClampedArray","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","halfBlockSize","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","bucketId","toArray","hasOwnProperty","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","type","exp","SH_C0","splatBuffer","endTime","PlyLoader","fetchFile","fileName","catch","err","loadFromURL","plyFileData","SplatLoader","downLoadLink","isFileSplatFormat","isCustomSplatFormat","isStandardSplatFormat","endsWith","splatCompressor","parseStandardSplatToUncompressedSplatArray","inBuffer","inCenterSizeBytes","inScaleSizeBytes","inColorSizeBytes","inBase","inCenter","inScale","inColor","inRotation","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","spinnerDivContainerOuter","className","display","spinnerDivContainer","spinnerDiv","messageDiv","innerHTML","show","hide","setContainer","removeChild","zIndex","setMessage","msg","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","material","source","geometry","SceneHelper","scene","splatRenderTarget","renderTargetCopyMaterial","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","updateSplatRenderTargetForRenderDimensions","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","children","forEach","child","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","sphereMesh","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","debugMeshRoot","createMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempCenter","tempScale","tempRotation","tempHit","scaleEpsilon","node","boundingBox","indexes","splatGlobalIndex","splatLocalIndex","getSplatLocalIndex","getSplatBufferForSplat","splatTransform","getTransformForSplat","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","globalSplatIndexToLocalSplatIndexMap","globalSplatIndexToSplatBufferIndexMap","globalIndex","splatBuffers","splatTransforms","processSplatMesh","filterFunc","totalSplatCount","validSplatCount","s","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","morphAttributes","fake","renderer","splatDataTextures","distancesTransformFeedback","program","centersBuffer","outDistancesBuffer","centersLoc","viewProjLoc","buildMaterial","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","NormalBlending","buildGeomtery","getTotalSplatCount","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","disposeMeshData","disposeGPUResources","textureKey","textureContainer","texture","build","splatBufferOptions","buildSplatTransforms","buildSplatTree","setupDistancesTransformFeedback","resetLocalSplatDataAndTexturesFromSplatBuffer","positionArray","compose","time","splatColor","splatBufferIndex","splatAlphaRemovalThreshold","timeEnd","leavesWithVertices","avgSplatCount","maxSplatCount","nodeCount","nodeSplatCount","updateLocalSplatDataFromSplatBuffer","allocateAndStoreLocalSplatDataInTextures","updateCentersGPUBufferForDistancesComputation","covariances","centers","colors","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","RGBAIntegerFormat","internalFormat","size","centerColors","updateSplatDataToDataTextures","updateLocalCovarianceDataToDataTexture","updateLocalCenterColorDataToDataTexture","updateIndexes","renderSplatCount","attributes","splatIndex","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","getSplatDataTextures","gl","getContext","vao","deleteVertexArray","deleteProgram","deleteShader","disposeGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","currentRenderer","currentSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","VERTEX_SHADER","FRAGMENT_SHADER","errors","getShaderInfoLog","currentVao","getParameter","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","DYNAMIC_COPY","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","getIntegerCenters","padFour","floatCenters","intCenters","componentCount","getIntegerMatrixArray","matrixElements","intMatrixArray","STATIC_DRAW","computeDistancesOnGPU","viewProjMatrix","outComputedDistances","iViewProjMatrix","iViewProj","enable","RASTERIZER_DISCARD","uniform3i","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","getBufferSubData","Constants","sortWorker","self","wasmInstance","wasmMemory","indexesToSortOffset","sortedIndexesOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","viewProjOffset","countsZero","onmessage","e","postMessage","sortSetupComplete","renderCount","splatRenderCount","splatSortCount","viewProj","usePrecomputedDistances","sortStartTime","DepthMapRange","exports","sortIndexes","sortEndTime","sortDone","sortTime","init","CENTERS_BYTES_PER_ENTRY","BytesPerInt","sorterWasmBytes","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForViewProjMatrix","BytesPerFloat","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","createSortWorker","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","Viewer","options","cameraUp","initialCameraPosition","initialCameraLookAt","selfDrivenMode","useBuiltInControls","rootElement","ignoreDevicePixelRatio","window","controls","selfDrivenUpdateFunc","selfDrivenUpdate","gpuAcceleratedSort","isMobile","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","loadingSpinner","usingExternalCamera","usingExternalRenderer","initializeFromExternalUpdate","initialized","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","Scene","onMouseUp","ResizeObserver","observe","setupInfoPanel","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","toNewFocalPoint","wasClick","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","padding","backgroundColor","border","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","prepend","updateSplatMeshUniforms","projectionMatrix","loadFile","fileURL","showLoadingSpinner","loadFileToSplatBuffer","suffix","orientation","loadSplatBuffersIntoMesh","loadFiles","files","fileCount","percentComplete","downloadProgress","fileIndex","totalPercent","downLoadPromises","meshOptionsForFile","downloadPromise","all","plySplatAlphaRemovalThreshold","fileLoadPromise","loadPromise","loadCount","performLoad","setTimeout","terminate","updateSplatMesh","setupSortWorker","updateView","allSplatBuffers","allSplatBufferOptions","frustumCulled","sortCanceled","gatherSceneNodes","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","start","requestAnimationFrame","stop","cancelAnimationFrame","render","setCamera","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfo","updateControlPlane","savedAuoClear","hasRenderables","lastCalcTime","frameCount","currentTime","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraPosition","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedTiers","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","sortCount","partialSort","sortFraction","shift","getSplatMesh","navigator","userAgent","RenderableViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","addSceneFromFile","addScenesFromFiles","colorWrite","mesh"],"mappings":"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"}